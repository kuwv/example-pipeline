---
name: CI Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: 'Set up Python 3.11'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .[dev]
      - name: Check headers
        run: isort --check-only **/*.py
      - name: Check code style
        run: black --check **/*.py
      - name: Lint source code
        run: pylint src/**/*.py
      - name: Type check source code
        run: mypy src/**/*.py
      - name: Perform security checks
        run: bandit -r src
  bumpversion:
    runs-on: ubuntu-latest
    needs: [sast]
    outputs:
      version: "${{ steps.getversion.outputs.version }}"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: "${{ github.event.pull_request.head.sha }}"
          fetch-depth: 0
      - name: 'Set up Python 3.11'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup gitconfig
        run: |
          git config user.name 'autonomous-bot'
          git config user.email 'an.autonomous.bot@gmail.com'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .[build]
      - name: Bump version
        run: |
          version bump
          version info --filepaths | tar -cvzf versioning.tar.gz -T -
      # name: Nofify other jobs of version update
      - id: getversion
        run: echo "version=$(version info)" >> "$GITHUB_OUTPUT"
      - name: Store versioned files
        uses: actions/upload-artifact@v4
        with:
          name: "versioning-${{ github.run_number }}"
          path: versioning.tar.gz
  build:
    runs-on: ubuntu-latest
    needs: [bumpversion, sast]
    steps:
      - uses: actions/checkout@v4
      - name: 'Set up Python 3.11'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .[build]
      - name: Download versioned files
        uses: actions/download-artifact@v4
        with:
          name: "versioning-${{ github.run_number }}"
      - name: Apply versioning changes
        run: tar -xzf versioning.tar.gz
      - name: Perform build
        run: python -m build
      - name: Store versioned files
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version:
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
    steps:
      - uses: actions/checkout@v4
      - name: Download versioned files
        uses: actions/download-artifact@v4
        with:
          name: "versioning-${{ github.run_number }}"
      - name: Install dependencies
        run: tar -xzf versioning.tar.gz
      - name: Download versioned files
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .[dev]
          pip install dist/*whl
      - name: Perform tests
        run: pytest --cov=superstate --cov-report=xml tests
  publish:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/checkout@v4
      - name: Download versioned files
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: 'Set up Python 3.11'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install twine==4.0.0
      - name: Perform publish
        run: |
          twine upload dist/* \
            --non-interactive \
            --repository testpypi \
            --username __token__ \
            --password "${{ secrets.TWINE_PASSWORD }}"
  publish-version:
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, test, bumpversion]
    steps:
      - uses: actions/checkout@v4
      - name: Download versioned files
        uses: actions/download-artifact@v4
        with:
          name: "versioning-${{ github.run_number }}"
      - name: Install dependencies
        run: tar -xzf versioning.tar.gz
      - name: Setup gitconfig
        run: |
          git config user.name 'autonomous-bot'
          git config user.email 'an.autonomous.bot@gmail.com'
      - name: Commit version changes
        run: |
          for f in $(tar -tzf versioning.tar.gz); do
            git add "$f"
          done
          git commit --message 'ci: update project release'
      - name: Tag version
        env:
          VERSION: "${{ needs.bumpversion.outputs.version }}"
        run: |
          git tag "v${VERSION}" --annotate --message "ci: update v${VERSION}"
      - name: Push version
        run: |
          git show-ref
          git remote -v
          git branch
          git pull origin "${GITHUB_HEAD_REF:-$GITHUB_REF}" \
            --ff \
            --rebase \
            --strategy-option theirs
          git push origin "HEAD:${GITHUB_HEAD_REF:-$GITHUB_REF}" \
            --push-option=ci.skip \
            --follow-tags
